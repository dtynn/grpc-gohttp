// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: echo.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	echo.proto

It has these top-level messages:
	In
	Out
*/
package proto

import http "net/http"
import grpc "google.golang.org/grpc"
import codes "google.golang.org/grpc/codes"
import metadata "google.golang.org/grpc/metadata"
import proto1 "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Paramer handle with arguments and outputs
type Paramer interface {
	ParseRequest(req *http.Request, in proto1.Message) error
	HandleResponse(rw http.ResponseWriter, out proto1.Message, err error)
}

// WebAPIService handle with api registration
type WebAPIService interface {
	Paramer
	Register(pattern string, handler http.Handler)
}

// RegisterWebAPIEchoServer register web api methods for Echo
func RegisterWebAPIEchoServer(s WebAPIService, srv EchoServer) {
	_Register_Echo_Ping_Handler(s, srv)
	_Register_Echo_Stream_Handler(s, srv)
}

func _Register_Echo_Ping_Handler(s WebAPIService, srv EchoServer) {
	s.Register("/proto.Echo/Ping", http.HandlerFunc(func(rw http.ResponseWriter, req *http.Request) {
		in := new(In)
		if err := s.ParseRequest(req, in); err != nil {
			s.HandleResponse(rw, nil, grpc.Errorf(codes.InvalidArgument, "parse request into %T: %s", in, err))
			return
		}

		ctx := metadata.NewIncomingContext(req.Context(), metadata.MD(req.Header).Copy())
		out, err := srv.Ping(ctx, in)
		s.HandleResponse(rw, out, err)
	}))
}

func _Register_Echo_Stream_Handler(s WebAPIService, srv EchoServer) {
}

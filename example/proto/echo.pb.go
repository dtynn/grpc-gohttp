// Code generated by protoc-gen-go. DO NOT EDIT.
// source: echo.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	echo.proto

It has these top-level messages:
	In
	Out
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageType int32

const (
	MessageType_MessageTypeUnKnown MessageType = 0
	MessageType_MessageTypeA       MessageType = 1
	MessageType_MessageTypeB       MessageType = 2
)

var MessageType_name = map[int32]string{
	0: "MessageTypeUnKnown",
	1: "MessageTypeA",
	2: "MessageTypeB",
}
var MessageType_value = map[string]int32{
	"MessageTypeUnKnown": 0,
	"MessageTypeA":       1,
	"MessageTypeB":       2,
}

func (x MessageType) String() string {
	return proto1.EnumName(MessageType_name, int32(x))
}
func (MessageType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type In struct {
	Typ MessageType `protobuf:"varint,1,opt,name=typ,enum=proto.MessageType" json:"typ,omitempty"`
	Msg string      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Num int64       `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
}

func (m *In) Reset()                    { *m = In{} }
func (m *In) String() string            { return proto1.CompactTextString(m) }
func (*In) ProtoMessage()               {}
func (*In) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *In) GetTyp() MessageType {
	if m != nil {
		return m.Typ
	}
	return MessageType_MessageTypeUnKnown
}

func (m *In) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *In) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type Out struct {
	Typ MessageType `protobuf:"varint,1,opt,name=typ,enum=proto.MessageType" json:"typ,omitempty"`
	Msg string      `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Num int64       `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
}

func (m *Out) Reset()                    { *m = Out{} }
func (m *Out) String() string            { return proto1.CompactTextString(m) }
func (*Out) ProtoMessage()               {}
func (*Out) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Out) GetTyp() MessageType {
	if m != nil {
		return m.Typ
	}
	return MessageType_MessageTypeUnKnown
}

func (m *Out) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Out) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func init() {
	proto1.RegisterType((*In)(nil), "proto.In")
	proto1.RegisterType((*Out)(nil), "proto.Out")
	proto1.RegisterEnum("proto.MessageType", MessageType_name, MessageType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Echo service

type EchoClient interface {
	Ping(ctx context.Context, in *In, opts ...grpc.CallOption) (*Out, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Echo_StreamClient, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Ping(ctx context.Context, in *In, opts ...grpc.CallOption) (*Out, error) {
	out := new(Out)
	err := grpc.Invoke(ctx, "/proto.Echo/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Echo_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Echo_serviceDesc.Streams[0], c.cc, "/proto.Echo/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoStreamClient{stream}
	return x, nil
}

type Echo_StreamClient interface {
	Send(*In) error
	Recv() (*Out, error)
	grpc.ClientStream
}

type echoStreamClient struct {
	grpc.ClientStream
}

func (x *echoStreamClient) Send(m *In) error {
	return x.ClientStream.SendMsg(m)
}

func (x *echoStreamClient) Recv() (*Out, error) {
	m := new(Out)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Echo service

type EchoServer interface {
	Ping(context.Context, *In) (*Out, error)
	Stream(Echo_StreamServer) error
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(In)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Echo/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Ping(ctx, req.(*In))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServer).Stream(&echoStreamServer{stream})
}

type Echo_StreamServer interface {
	Send(*Out) error
	Recv() (*In, error)
	grpc.ServerStream
}

type echoStreamServer struct {
	grpc.ServerStream
}

func (x *echoStreamServer) Send(m *Out) error {
	return x.ServerStream.SendMsg(m)
}

func (x *echoStreamServer) Recv() (*In, error) {
	m := new(In)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Echo_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Echo_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "echo.proto",
}

func init() { proto1.RegisterFile("echo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4d, 0xce, 0xc8,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19,
	0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9, 0xe9, 0xf9, 0xfa, 0x60, 0xe1, 0xa4, 0xd2,
	0x34, 0x30, 0x0f, 0xcc, 0x01, 0xb3, 0x20, 0xba, 0x94, 0xfc, 0xb8, 0x98, 0x3c, 0xf3, 0x84, 0x54,
	0xb8, 0x98, 0x4b, 0x2a, 0x0b, 0x24, 0x18, 0x15, 0x18, 0x35, 0xf8, 0x8c, 0x84, 0x20, 0x52, 0x7a,
	0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x21, 0x95, 0x05, 0xa9, 0x41, 0x20, 0x69, 0x21, 0x01,
	0x2e, 0xe6, 0xdc, 0xe2, 0x74, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x13, 0x24, 0x92,
	0x57, 0x9a, 0x2b, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1c, 0x04, 0x62, 0x2a, 0xf9, 0x73, 0x31, 0xfb,
	0x97, 0x96, 0x50, 0xcf, 0x40, 0x2d, 0x4f, 0x2e, 0x6e, 0x24, 0x7d, 0x42, 0x62, 0x5c, 0x42, 0x48,
	0xdc, 0xd0, 0x3c, 0xef, 0xbc, 0xfc, 0xf2, 0x3c, 0x01, 0x06, 0x21, 0x01, 0x2e, 0x1e, 0x24, 0x71,
	0x47, 0x01, 0x46, 0x34, 0x11, 0x27, 0x01, 0x26, 0x23, 0x2f, 0x2e, 0x16, 0xd7, 0xe4, 0x8c, 0x7c,
	0x21, 0x59, 0x2e, 0x96, 0x80, 0xcc, 0xbc, 0x74, 0x21, 0x4e, 0xa8, 0xbb, 0x3c, 0xf3, 0xa4, 0xb8,
	0xa0, 0x4c, 0x90, 0xdb, 0x95, 0xb9, 0xd8, 0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x71, 0x28, 0xd0,
	0x60, 0x34, 0x60, 0x74, 0x62, 0xb9, 0xf0, 0x50, 0x8e, 0x21, 0x89, 0x0d, 0x2c, 0x68, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x46, 0x44, 0xba, 0xc8, 0x88, 0x01, 0x00, 0x00,
}
